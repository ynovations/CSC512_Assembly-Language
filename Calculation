%include "io64.inc"

section .data
    number dq 135           ; Define 'number' as double quadword for 64-bit
    sum_result dq 0         ; Initialize sum_result to zero in the .data section
    division_result dq 0    ; Reserve space for the result of division
    remainder_result dq 0   ; Reserve space for the remainder of division

section .bss
    digit_count resb 1      ; Store the number of digits extracted

section .text
global main

main:
    mov rax, [number]       
    xor rbx, rbx            

    PRINT_STRING "Input Number: "
    PRINT_DEC 8, [number]
    NEWLINE
    
    PRINT_STRING "Digits: "
extract_loop:
    xor rdx, rdx            
    mov rcx, 10             
    div rcx                 
    PRINT_DEC 8, rdx
    PRINT_STRING ","
    add rbx, rdx            
    cmp rax, 0              
    jne extract_loop        

    ; Store the sum in sum_result
    mov [sum_result], rbx   

    ; Perform division: number / sum_result
    mov rax, [number]       
    mov rbx, [sum_result]   
    xor rdx, rdx            
    div rbx                 

    ; Store the result of division and remainder
    mov [division_result], rax 
    mov [remainder_result], rdx 
    NEWLINE
    PRINT_STRING "Sum of digits: "
    PRINT_DEC 8, sum_result
    NEWLINE
    PRINT_STRING "Quotient: "
    PRINT_DEC 8, division_result
    NEWLINE
    PRINT_STRING "Remainder: "
    PRINT_DEC 8, remainder_result
    
    ; Exiting the program
    xor rdi, rdi            
    ret
